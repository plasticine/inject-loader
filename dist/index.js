module.exports=function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=1)}([function(e,n){e.exports=require("babel-core")},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n){this.cacheable&&this.cacheable();var t=(0,r.default)(this,e,n,this.query||{}),i=t.code,o=t.map;this.callback(null,i,o)};var r=function(e){return e&&e.__esModule?e:{default:e}}(t(2));e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e,n,t,o){var s=(0,r.transform)(n,{babelrc:!!o.babelrc,code:!1,compact:!1,filename:e.resourcePath}).ast,a=[];(0,r.traverse)(s,{CallExpression:function(e){r.types.isIdentifier(e.node.callee,{name:"require"})&&(a.push(function(e){var n=e.node.arguments[0].value;return e.replaceWith(r.types.expressionStatement(r.types.conditionalExpression(r.types.callExpression(r.types.memberExpression(r.types.identifier("__injections"),r.types.identifier("hasOwnProperty"),!1),[r.types.stringLiteral(n)]),r.types.memberExpression(r.types.identifier("__injections"),r.types.stringLiteral(n),!0),e.node))),n}(e)),e.skip())}}),0===a.length&&e.emitWarning("The module you are trying to inject into doesn't have any dependencies. Are you sure you want to do this?");var c=r.types.file(r.types.program([(0,i.default)({SOURCE:s,SOURCE_PATH:r.types.stringLiteral(e.resourcePath),DEPENDENCIES:r.types.arrayExpression(a.map(function(e){return r.types.stringLiteral(e)}))})]));return(0,r.transformFromAst)(c,n,{sourceMaps:e.sourceMap,sourceFileName:e.resourcePath,inputSourceMap:t,babelrc:!!o.babelrc,compact:!1,filename:e.resourcePath})};var r=t(0),i=function(e){return e&&e.__esModule?e:{default:e}}(t(3));e.exports=n.default},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(0);n.default=(0,r.template)("\n  module.exports = function __injector(__injections) {\n    __injections = __injections || {};\n\n    (function __validateInjection() {\n      var validDependencies = DEPENDENCIES;\n      var injectedDependencies = Object.keys(__injections);\n      var invalidInjectedDependencies = injectedDependencies.filter(function (dependency) {\n        return validDependencies.indexOf(dependency) === -1;\n      });\n\n      if (invalidInjectedDependencies.length > 0) {\n        var validDependenciesString = ' - ' + validDependencies.join('\\n - ');\n        var injectedDependenciesString = ' - ' + injectedDependencies.join('\\n - ');\n        var invalidDependenciesString = ' - ' + invalidInjectedDependencies.join('\\n - ');\n\n        throw new Error('Injection Error in ' + SOURCE_PATH + '\\n\\n' +\n          'The following injections are invalid:\\n' + invalidDependenciesString + '\\n\\n' +\n          'The following injections were passed in:\\n' + injectedDependenciesString + '\\n\\n' +\n          'Valid injection targets for this module are:\\n' + validDependenciesString + '\\n'\n        );\n      }\n    })();\n\n    __injector.sourcePath = SOURCE_PATH;\n    __injector.validDependencies = DEPENDENCIES;\n\n    var module = { exports: {} };\n    var exports = module.exports;\n\n    (function () {\n      SOURCE\n    })();\n\n    return module.exports;\n  }\n"),e.exports=n.default}]);